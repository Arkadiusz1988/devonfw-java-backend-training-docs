:toc: macro
toc::[]

= Order Service -Security

In this chapter we are going to configure authorization for our services. We will learn how to create permission and roles, how to grant theme and how to apply permisions to business logic.

== Basic configuration

As mentioned at the beginning of this course basic configuration is already created. It was done at the very begining during creation of application from archetype. You can find it in a classes:
[source,java]
----
com.devonfw.app.java.order.general.service.impl.config.BaseWebSecurityConfig
com.devonfw.app.java.order.general.common.impl.security.BaseUserDetailsService
----

As you can see in a first file there are some users configured already.

== Authorization

Configuration of authorization can be done in two ways - Access Control Config (new way) or Access Control Schema (old method).

=== Access Control Config
In first method simply extend AccessControlConfig to configure your access control objects as code and reference it from your use-cases. In our application you can find it under:
----
com.devonfw.app.java.order.general.common.api.security.ApplicationAccessControlConfig
----

=== Access Control Schema
In this method file access-control-schema.xml is used to define the mapping from groups to permissions. You are defining all typer and later on using cobigen you are able co configure PermissionConstants files to use it in your implementation.

More details can be found under:
https://github.com/devonfw/devon4j/wiki/guide-access-control

== Exercises

. Basic configuration

* Prepare permissions for your business logic using Access Control Schema method. To do that please modify file access-control-schema.xml appropriate. Examples you can find in link above. Use names appropriate to implemented use cases.
** Please use inheritance of permissions.
* After that use CobiGen to generate from file access-control-schema.xml PermissionConstants.java which can be used to protect our UseCases.
* In the class OrderserviceImpl use the @RolesAllowed annotation and the new permissions to grant access to the desired group of users
* Users currently are defined in class BaseWebSecurityConfig->configureGlobal. Please note that when method roles is used then prefix ROLE_ is added automaticly (then all users will have roles like ROLE_Cook). To avoid it you can use method authorities instead to avoid it.
* Even role are configured they are still not used. Please look to file BaseUserDetailsService->getRoles. This implementation assign for every User one role - username. Please note that for Access Control Schema roles are camel case. You can test it by setting in example role cook instead od Cook in file access-control-schema.xml and test it. Please change implementation of method getRoles to return appropriate list of roles.
* Run application and check if everything works. If there is a forbidden message for appropriate operations while for allowed you can execute theme.

. Try to achieve the same results using new method (ApplicationAccessControlConfig). Adjust this file appropriate and enable it just comment AccessControlProvider bean in class WebSecurityBeansConfig. Please note that convention naming of roles and permission is diffrent. Prefix with apllication name is added. So or replace annotations RolesAllowed to use current values or remove prefix.

. Instead of in memory authentication try to use database
* Create appropriate migration script which add accounts and roles
* Change method configureGlobal in class BaseUserDetailsService to use database.
