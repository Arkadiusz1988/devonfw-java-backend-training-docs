:toc: macro
toc::[]

= Build your own devon4j application

In this chapter we are going to show how to create a new _devon4j_ application from scratch. The app that we are going to create is _Order Service_, a simple to order items. You can read all the details of the app in the link:order-service[Order Service] page.

== Getting devonfw distribution

The recommended way to start developing _devon4j_ applications is to get the last _devonfw_ distribution to have a _ready-to-start_ development environment.

You should get from your trainer the location where you can find the distribution.

To see what is included in a _devonfw_ please visit the link:devonfw-intro[devonfw intro section.]

Once the download is done extract the _zip_ file and you will get the distribution's content.

image::images/devon/devon_dist.png[width="450", link="images/devon/devon_dist.png"]

== Prepare the workspace and initialize the distribution

First, in the _workspaces_ directory of the distribution create a new folder _school_ and go into it. To configure the workspace and generate eclipse launcher please launch the script
----
update-all-workspaces.bat
----

Now you should see the _conf_ directory and the Eclipse launchers.

[NOTE]
====
Learn more about _devonfw_ initialization https://github.com/devonfw/devon/wiki/getting-started-download-and-setup#setup-the-workspace[here]
====

After the process is done you should see a new _eclipse-school.bat_ launcher. Execute it and a new _Eclipse_ instance should be opened.

[NOTE]
====
Actually there is a bug in the process of generating the workspace. The Maven configuration contains wrong path to `settings.xml` file. After the Eclipse is started please open the _Preferences_ dialog in tab _Window_, go to _Maven > User Settings_, set the correct path to the `settings.xml` placed in your copy of _Devon IDE_ (`conf\.m2\settings.xml`) and push the button _Update Settings_

image::images/devon4j/3.BuildYourOwn/maven-settings.png[width="750", link="images/devon4j/3.BuildYourOwn/maven-settings.png"]

Check whether the _Local Directory_ parameter points to a repository placed in your _Devon IDE_ distribution (`conf\.m2\repository`)
====

Execute _console.bat_ to get a console initialized with the provided software served in the `software` folder.

[NOTE]
====
Even though this tutorial is following an structure similar to https://github.com/devonfw/my-thai-star[MyThaiStar]. If you are using the devonfw distribution, we recommend the use of the workspaces as a folder to create the project. We recomend to adapt the parameters appropriately. Once you finished generating the project, execute the script `update-all-workspaces.bat` and it will include a script in the root of the devonfw dist with your new workspace for eclipse.
====

== Clone the training repository

Please fork the repository https://github.com/server-platforms-training/devonfw-java-backend-training into your Github account and clone it into `workspaces\school`. Therefore, run the following command in the console to change to the
directory to `workspaces\school`

----
cd workspaces\school
git clone https://github.com/<github id>/devonfw-java-backend-training.git
cd devonfw-java-backend-training
----

== Create the server project using the archetype

In order to create a new application, you must use the archetype provided by devon which uses the
maven archetype functionality.

There are two alternatives for using the archetype to create a new application. One is to create
using command line. Another way is within eclipse, which is a more visual manner.

=== Using the Command Line

==== Step 1: Open the console

Open the devonfw console by executing the batch file console.bat from the devonfw distribution. It
is a pre-configured console which automatically uses the software and configuration provided by
the devonfw distribution.

==== Step 2: Change the directory

You can create the project anywhere you want, but it is a good practice to create the projects in
your `workspace` directory. Therefore, run the following command in the console to change to the
directory to `workspaces\school\devonfw-java-backend-training`.

----
cd workspaces\school\devonfw-java-backend-training
----

==== Step 3: Create the new application

To create a new application, you need to execute one of the following commands:

----
mvn archetype:generate -DarchetypeVersion=3.0.1 -DarchetypeGroupId=com.devonfw.java.templates -DarchetypeArtifactId=devon4j-template-server -DgroupId=com.devonfw.app.java -DartifactId=order-service -Dversion=0.0.1-SNAPSHOT -Dpackage=com.devonfw.app.java.order -DdbType=h2
----

This will create a new directory inside `workspaces\school\devonfw-java-backend-training` with the name of your application with the
created application inside.

=== Using the Eclipse

[NOTE]
====
If you use a proxy to connect to the Internet, then the above steps will not work as Eclipse has a known bug where the archetype discovery does not work behind a proxy. In this case, please use the command line version documented above.
====

To create a new application using Eclipse, you should have installed devonfw distribution. Then,
follow below steps to create a new application:

==== Step 1: Create new Maven project

Open Eclipse from a devonfw distribution, by executing the batch file eclipse-main.bat, then go to
_File > New > Maven Project_. If you donâ€™t see the option, click _File > New > Other_ and use the filter to search the option Maven Project

Set `workspaces\school\devonfw-java-backend-training\order-service` as the location

image::images/devon4j/3.BuildYourOwn/new-app-1.png[width="750", link="images/devon4j/3.BuildYourOwn/new-app-1.png"]

==== Step 2: Choose the archetype

In the New Maven Project wizard, you need to choose the _devon4j-template-server_ archetype, as shown
in below image.

image::images/devon4j/3.BuildYourOwn/new-app-2.png[width="750", link="images/devon4j/3.BuildYourOwn/new-app-2.png"]

[NOTE]
====
If you are not able to access the archetype, then try adding the archetype repository manually. You can do it with the _Configure_ button located next to the _Catalogs_ dropdown and then clicking the _Add Remote Catalog_ button. Finally, you need to add the repository _URL_ https://repo1.maven.org/maven2 and as _Description_ you can use _Maven Central_.

image::images/devon4j/3.BuildYourOwn/new-app-3.png[width="500", link="images/devon4j/3.BuildYourOwn/new-app-3.png"]

Use the _Verify_ button to check the connection. Subsequently, you will see a message with the amount of found archetypes.
====

==== Step 3: Configure the application properties
Fill the _Group Id_, _Artifact Id_, _Version_ and _Package_ for your project. Also in Properties available from archetype section update the _dbtype_ parameter

- _Group Id_: `com.devonfw.app.java`
- _Artifact Id_: `order-service`
- _Version_: `0.0.1-SNAPSHOT`
- _Package_: `com.devonfw.app.java.order`
- _dbtype_: `h2`

image::images/devon4j/3.BuildYourOwn/new-app-4.png[width="750", link="images/devon4j/3.BuildYourOwn/new-app-4.png"]

Click on the _Finish_ button and the project will be ready for execution.


== Import the app

[NOTE]
====
You can skip this step if you have created the project using the Eclipse. The project was automatically imported into Eclipse
====

As last step we can import the project we just created into the Eclipse IDE provided with _devonfw_. Although our new _devon4j_ based app is still empty we are going to show how to run it with _Spring Boot_ simply to check that everything is ok.

Execute _eclipse-school.bat_ launcher (if not done yet) and a new _Eclipse_ instance should be opened.

Now import our new project with `File > Import`.

Select _Maven/Existing Maven Projects_

image::images/devon4j/3.BuildYourOwn/new-app-5.png[width="500", link="images/devon4j/3.BuildYourOwn/new-app-5.png"]

Browse for the `order-service` directory. Next select the _api_ and _core_ projects.

image::images/devon4j/3.BuildYourOwn/new-app-6.png[width="500", link="images/devon4j/3.BuildYourOwn/new-app-6.png"]

Click `Finish` and wait while the dependencies of the project are resolved to complete the import process.

== Empty app structure

Creating _devon4j_ based apps we get the following main features _out-of-the-box_:

* _Maven_ project with _api_ project, _core_ project and _server_ project:

** _api_ project for the common API

** _core_ project for the app implementation

** _server_ project ready to package the app for the deployment

image::images/devon4j/3.BuildYourOwn/devcon_devon4j_project_exp.PNG[ width="500", link="images/devon4j/3.BuildYourOwn/devcon_devon4j_project_exp.PNG"]


* Data base ready environment with an _h2_ instance
* Data model schema
* Mock data schema
* Database version control with Flyway

image::images/devon4j/3.BuildYourOwn/devcon_devon4j_flyway.PNG[ width="250", link="images/devon4j/3.BuildYourOwn/devcon_devon4j_flyway.PNG"]


* Bean mapper ready

image::images/devon4j/3.BuildYourOwn/emptyapp_beanmapper.png[ width="650", link="images/devon4j/3.BuildYourOwn/emptyapp_beanmapper.png"]


* Basic security enabled (based on _Spring Security_)

image::images/devon4j/3.BuildYourOwn/emptyapp_security.png[ width="650", link="images/devon4j/3.BuildYourOwn/emptyapp_security.png"]


* Unit test support and model

image::images/devon4j/3.BuildYourOwn/emptyapp_test.png[ width="650", link="images/devon4j/3.BuildYourOwn/emptyapp_test.png"]


== Configure the project

Now let's change the _server context path_ of our application. Open `/jtqj-core/src/main/resources/config/application.properties` and set the `server.context-path` property to _/order-service_

[source,properties]
----
server.servlet.context-path=/order-service
----

[NOTE]
====
You can also change the port where the application will be available with the property `server.port`
====

The generated project is per default configured to use the H2 file database. Please change the configration to use the in-memory database. Please change replace following line

[source,properties]
----
spring.datasource.url=jdbc:h2:./.order-service;
----

with

[source,properties]
----
spring.datasource.url=jdbc:h2:mem:order-service
----



Please add the _DevTools_ dependency into the `pom.xml` file of the _core_ project

[source,xml]
----
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-devtools</artifactId>
  <optional>true</optional>
</dependency>
----

_DevTools_ provides Spring developers with some handy development-time tools. Among those are

- Automatic application restart when code changes
- Automatic browser refresh when browser-destined resources (such as templates, JavaScript, stylesheets, and so on) change
- Automatic disable of template caches
- Built in H2 Console if the H2 database is in use

[NOTE]
====
To be able to correctly display the H2 Console you need to perform small change in the Spring Security configuration. Please open the `BaseWebSecurityConfig` class and add following line

[source,java]
----
.headers().frameOptions().sameOrigin().and()
----
====


== Run the app

Finally, using _Spring Boot_ features (that provides us with an embedded Tomcat), we can run the app in an easy way. Look for the `SpringBootApp.java` class and click right button and select `Run As > Java Application` or `Run As > Spring Boot Application`. To be able to used the _DevTools_ you should use the second option

image::images/devon4j/3.BuildYourOwn/run.png[, link="images/devon4j/3.BuildYourOwn/run.png"]

If everything is ok you will see a messages in the _Console_ window like

----
INFO 25656 --- [  restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8081 (http) with context path '/order-service'
INFO 25656 --- [  restartedMain] c.devonfw.app.java.order.SpringBootApp   : Started SpringBootApp in 9.808 seconds (JVM running for 12.025)
----

The app will be available at http://localhost:8081/order-service

image::images/devon4j/3.BuildYourOwn/login.png[, link="images/devon4j/3.BuildYourOwn/login.png"]

[NOTE]
====
You are redirected to the login screen because, by default, the new _devon4j_ applications provide a basic security set up.
====

Please use the `waiter/waiter` credentials to login. You should see following content

image::images/devon4j/3.BuildYourOwn/welcome.png[, link="images/devon4j/3.BuildYourOwn/welcome.png"]

== Simple `GET` call

The generated project provides under http://localhost:8081/order-service/services/rest/security/v1/currentuser a simple REST service to receive the current logged-in user. Try to call the service using _Postman_

image::images/devon4j/3.BuildYourOwn/simple-get-1.png[, link="images/devon4j/3.BuildYourOwn/simple-get-1.png"]

Instead of receiving the current user data we get a response with the login form. This is because the _devon4j_ applications, by default, implements the _Spring Security_ so we would need to log in using the log in form to access to the services.

To ease the example we are going to change the login method to _Http Basic Authentication_ and disable the _CSRF_ filter (otherwise you would need to send additional CSRF token with each writting operation)

In the file `BaseWebSecurityConfig.java` edit the `configure(HttpSecurity http)` method and replace following line:

[source,java]
----
.csrf().requireCsrfProtectionMatcher(new CsrfRequestMatcher()).and()
----
with
[source,java]
----
.csrf().disable().httpBasic().and()
----

Now run again the app and try again the same call. You should obtain the data of the current user

image::images/devon4j/3.BuildYourOwn/simple-get-2.png[, link="images/devon4j/3.BuildYourOwn/simple-get-2.png"]

== Open the H2 Console

During the training you will probably see the content of the database. Please open the H2 Console using following url http://localhost:8081/order-service/h2-console/ Please use the correct _JDBC URL_ you have configured previously.

image::images/devon4j/3.BuildYourOwn/h2-console-login.png[, link="images/devon4j/3.BuildYourOwn/h2-console-login.png"]

After successful login you should see following content

image::images/devon4j/3.BuildYourOwn/h2-console.png[, link="images/devon4j/3.BuildYourOwn/h2-console.png"]

== Cobigen Health Check

We will generate some parts of the application using _Cobigen_. The first time we use _Cobigen_, it is recommended to check the health of the tool. To do so, right-click over an entity and select _Update Templates..._ and next _Health Check_

image::images/devon4j/4.Components/cobigen0.png[width="750", link="images/devon4j/4.Components/cobigen0.png"]

The next dialogs will show us if there are outdated templates. In that case we can solve it clicking the _Update_ button.

image::images/devon4j/4.Components/cobigen_health1.png[width="350",link="images/devon4j/4.Components/cobigen_health1.png"]

image::images/devon4j/4.Components/cobigen_health2.png[width="350",link="images/devon4j/4.Components/cobigen_health2.png"]


=== link:devon4j-components.asciidoc[Next chapter: Add a component to your app]
